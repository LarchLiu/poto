import { resolve } from 'path'
import { promises as fs } from 'fs'
import { throttle } from '@antfu/utils'
import { camelCase } from 'scule'
import type { Options } from '../types'

const defaultExportPath = 'blockType.ts'

export function createContext(options: Options = {}, root = process.cwd()) {
  const exportPath = resolve(root, options.exportPath ?? defaultExportPath)
  const packagePath = resolve(root, 'package.json')

  async function generateExport() {
    const info = await fs.readFile(packagePath, 'utf-8')
    const packageInfo = JSON.parse(info)
    if (!packageInfo.name)
      throw new Error('[poto-gen-widget-type] package.json have no name filed')
    const name = camelCase(packageInfo.name.replaceAll('@', ''))
    const str = `// Generated by \'@poto/gen-block-type\'\nexport const BlockType = '${name}'\n`
    return str
  }

  const writeConfigFilesThrottled = throttle(500, false, writeConfigFiles)

  let lastImport: string | undefined

  async function writeConfigFiles() {
    const promises: any[] = []
    if (exportPath) {
      const content = await generateExport()
      if (content !== lastImport) {
        lastImport = content
        promises.push(fs.writeFile(exportPath, content, 'utf-8'))
      }
    }
    return Promise.all(promises)
  }

  return {
    root,
    generateExport,
    writeConfigFiles,
    writeConfigFilesThrottled,
  }
}

